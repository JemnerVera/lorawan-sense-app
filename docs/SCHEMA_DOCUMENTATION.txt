# üìä SCHEMA DOCUMENTATION - SENSE DATABASE

## üèóÔ∏è ESTRUCTURA GENERAL DE LA BASE DE DATOS

### üìç TABLAS DE UBICACI√ìN (CONFIGURACI√ìN)
- **pais**: Pa√≠ses del sistema
- **empresa**: Empresas/Organizaciones
- **fundo**: Fundos/Propiedades agr√≠colas
- **ubicacion**: Ubicaciones espec√≠ficas dentro de fundos
- **localizacion**: Coordenadas GPS y ubicaci√≥n geogr√°fica
- **entidad**: Entidades gubernamentales o reguladoras

### üîß TABLAS DE DISPOSITIVOS (OPERACIONALES)
- **tipo**: Tipos de sensores (ej: Sensor Maceta 10cm, Sensor Suelo 40cm)
- **nodo**: Nodos de sensores (ej: rls-1111111)
- **sensor**: Sensores individuales asociados a nodos
- **metricasensor**: M√©tricas espec√≠ficas de cada sensor
- **metrica**: Definiciones de m√©tricas (ej: Temperatura, Humedad, pH)

### üìä TABLAS DE DATOS
- **medicion**: Datos de lecturas de sensores (SOLO LECTURA para Dashboard)
- **sensor_valor**: Valores espec√≠ficos de sensores
- **sensor_valor_error**: Errores en lecturas de sensores

### üö® NUEVAS TABLAS DE UMBRAL (ALERTAS)
- **umbral**: Definici√≥n de l√≠mites para m√©tricas
- **perfilumbral**: Perfiles de umbrales para diferentes contextos
- **audit_log_umbral**: Historial de cambios en umbrales
- **criticidad**: Niveles de criticidad para alertas

### üë• NUEVAS TABLAS DE USUARIOS (NOTIFICACIONES)
- **usuario**: Usuarios del sistema
- **perfil**: Perfiles de usuario (ej: Administrador, T√©cnico, Supervisor)
- **usuarioperfil**: Relaci√≥n muchos a muchos entre usuarios y perfiles
- **contacto**: Informaci√≥n de contacto de usuarios
- **medio**: Medios de comunicaci√≥n (ej: Email, SMS, WhatsApp)
- **mensaje**: Plantillas de mensajes para alertas

### üîî TABLAS DE ALERTAS
- **alerta**: Alertas generadas cuando se superan umbrales

## üîó RELACIONES PRINCIPALES

### SENSOR ‚Üí MEDICI√ìN
- Un sensor puede tener m√∫ltiples mediciones
- Las mediciones se comparan contra umbrales para generar alertas

### UMBRAL ‚Üí ALERTA
- Los umbrales definen cu√°ndo se debe generar una alerta
- Las alertas se env√≠an a usuarios seg√∫n su perfil

### USUARIO ‚Üí PERFIL ‚Üí UMBRAL
- Los usuarios tienen perfiles que determinan qu√© umbrales monitorean
- Los perfiles definen qu√© alertas recibe cada usuario

## üìã FUNCIONALIDADES A IMPLEMENTAR

### 1. SISTEMA DE UMBRALES
- Configurar l√≠mites m√≠nimos y m√°ximos para cada m√©trica
- Definir perfiles de umbral para diferentes contextos (ej: Invernadero, Campo Abierto)
- Monitorear mediciones en tiempo real contra umbrales

### 2. SISTEMA DE ALERTAS
- Generar alertas autom√°ticas cuando se superan umbrales
- Clasificar alertas por criticidad (Baja, Media, Alta, Cr√≠tica)
- Registrar historial de alertas y cambios en umbrales

### 3. SISTEMA DE NOTIFICACIONES
- Enviar alertas a usuarios seg√∫n su perfil y responsabilidades
- M√∫ltiples medios de comunicaci√≥n (Email, SMS, WhatsApp)
- Plantillas de mensajes personalizables

## üéØ OBJETIVOS DE LA IMPLEMENTACI√ìN

1. **Monitoreo Autom√°tico**: Comparar mediciones contra umbrales en tiempo real
2. **Alertas Inteligentes**: Notificar solo a usuarios relevantes seg√∫n el contexto
3. **Historial Completo**: Mantener registro de todos los eventos y cambios
4. **Flexibilidad**: Permitir configuraci√≥n de umbrales por contexto y usuario

## üìù NOTAS IMPORTANTES

- **medicion**: Solo lectura para Dashboard, no se puede modificar desde la aplicaci√≥n
- **RLS**: Todas las tablas tienen Row Level Security habilitado
- **Permisos**: Usuarios autenticados pueden SELECT, INSERT, UPDATE (NO DELETE)
- **Backend**: service_role tiene acceso completo para operaciones del sistema

## üèóÔ∏è AN√ÅLISIS DETALLADO DEL SCHEMA

### **ESTRUCTURA DE TABLAS EXISTENTES (VERIFICADAS)**

#### **Tabla: pais**
- **Primary Key**: `paisid` (SERIAL/INTEGER)
- **Campos**: `pais` (VARCHAR), `paisabrev` (VARCHAR), `statusid` (INTEGER)
- **Constraints**: NOT NULL en campos principales
- **Relaciones**: Referenciada por `empresa.paisid`

#### **Tabla: empresa**
- **Primary Key**: `empresaid` (SERIAL/INTEGER)
- **Foreign Keys**: `paisid` ‚Üí `pais.paisid`
- **Campos**: `empresa` (VARCHAR), `empresabrev` (VARCHAR), `statusid` (INTEGER)
- **Relaciones**: Referenciada por `fundo.empresaid`

#### **Tabla: fundo**
- **Primary Key**: `fundoid` (SERIAL/INTEGER)
- **Foreign Keys**: `empresaid` ‚Üí `empresa.empresaid`
- **Campos**: `fundo` (VARCHAR), `farmabrev` (VARCHAR), `statusid` (INTEGER)
- **Relaciones**: Referenciada por `ubicacion.fundoid`

#### **Tabla: ubicacion**
- **Primary Key**: `ubicacionid` (SERIAL/INTEGER)
- **Foreign Keys**: `fundoid` ‚Üí `fundo.fundoid`
- **Campos**: `ubicacion` (VARCHAR), `ubicacionabrev` (VARCHAR), `statusid` (INTEGER)
- **Relaciones**: Referenciada por `localizacion.ubicacionid`

#### **Tabla: localizacion**
- **Primary Key**: `localizacionid` (SERIAL/INTEGER)
- **Foreign Keys**: 
  - `ubicacionid` ‚Üí `ubicacion.ubicacionid`
  - `nodoid` ‚Üí `nodo.nodoid`
  - `entidadid` ‚Üí `entidad.entidadid`
- **Campos**: `latitud` (DECIMAL), `longitud` (DECIMAL), `referencia` (TEXT), `statusid` (INTEGER)
- **Relaciones**: Conecta ubicaciones con nodos y entidades

#### **Tabla: entidad**
- **Primary Key**: `entidadid` (SERIAL/INTEGER)
- **Campos**: `entidad` (VARCHAR), `statusid` (INTEGER)
- **Relaciones**: Referenciada por `tipo.entidadid` y `localizacion.entidadid`

#### **Tabla: tipo**
- **Primary Key**: `tipoid` (SERIAL/INTEGER)
- **Foreign Keys**: `entidadid` ‚Üí `entidad.entidadid`
- **Campos**: `tipo` (VARCHAR), `statusid` (INTEGER)
- **Relaciones**: Referenciada por `sensor.tipoid`, `metricasensor.tipoid`, `umbral.tipoid`

#### **Tabla: nodo**
- **Primary Key**: `nodoid` (SERIAL/INTEGER)
- **Campos**: `nodo` (VARCHAR), `deveui` (VARCHAR), `appeui` (VARCHAR), `appkey` (VARCHAR), `atpin` (VARCHAR), `statusid` (INTEGER)
- **Relaciones**: Referenciada por `sensor.nodoid`, `metricasensor.nodoid`, `localizacion.nodoid`

#### **Tabla: metrica**
- **Primary Key**: `metricaid` (SERIAL/INTEGER)
- **Campos**: `metrica` (VARCHAR), `unidad` (VARCHAR), `statusid` (INTEGER)
- **Relaciones**: Referenciada por `metricasensor.metricaid`, `umbral.metricaid`

#### **Tabla: sensor**
- **Composite Primary Key**: `nodoid` + `tipoid`
- **Foreign Keys**: 
  - `nodoid` ‚Üí `nodo.nodoid`
  - `tipoid` ‚Üí `tipo.tipoid`
- **Campos**: `statusid` (INTEGER)
- **Relaciones**: Conecta nodos con tipos de sensor

#### **Tabla: metricasensor**
- **Composite Primary Key**: `nodoid` + `metricaid` + `tipoid`
- **Foreign Keys**: 
  - `nodoid` ‚Üí `nodo.nodoid`
  - `metricaid` ‚Üí `metrica.metricaid`
  - `tipoid` ‚Üí `tipo.tipoid`
- **Campos**: `statusid` (INTEGER)
- **Relaciones**: Define qu√© m√©tricas mide cada sensor

### **ESTRUCTURA DE NUEVAS TABLAS (ANALIZADAS)**

#### **Tabla: criticidad**
- **Primary Key**: `criticidadid` (INTEGER)
- **Campos**: 
  - `criticidad` (VARCHAR) - "Baja", "Media", "Alta", "Cr√≠tica"
  - `criticidadbrev` (VARCHAR) - Abreviatura del nivel ("B", "M", "A", "C")
  - `statusid` (INTEGER) - Estado del registro (default: 1)
- **Audit Fields**: `usercreatedid`, `datecreated`, `usermodifiedid`, `datemodified`
- **Relaciones**: Referenciada por `perfilumbral.criticidadid` y `alerta.criticidadid`

#### **Tabla: medio**
- **Primary Key**: `medioid` (INTEGER)
- **Campos**: 
  - `nombre` (VARCHAR) - "Email", "SMS", "WhatsApp", "Push"
  - `statusid` (INTEGER) - Estado del registro (default: 1)
- **Audit Fields**: `usercreatedid`, `datecreated`, `usermodifiedid`, `datemodified`
- **Relaciones**: Referenciada por `contacto.medioid`

#### **Tabla: perfil**
- **Primary Key**: `perfilid` (INTEGER)
- **Campos**: 
  - `perfil` (VARCHAR) - "Administrador", "Supervisor", "T√©cnico", "Operador"
  - `nivel` (VARCHAR) - "Alto", "Medio", "Bajo"
  - `statusid` (INTEGER) - Estado del registro (default: 1)
- **Audit Fields**: `usercreatedid`, `datecreated`, `usermodifiedid`, `datemodified`
- **Relaciones**: Referenciada por `usuarioperfil.perfilid` y `perfilumbral.perfilid`

#### **Tabla: usuario**
- **Primary Key**: `usuarioid` (INTEGER)
- **Campos**: 
  - `firstname` (VARCHAR) - Nombre del usuario
  - `lastname` (VARCHAR) - Apellido del usuario
  - `login` (VARCHAR) - Email √∫nico del usuario
  - `statusid` (INTEGER) - Estado del registro (default: 1)
  - `auth_user_id` (UUID) - ID de autenticaci√≥n de Supabase
- **Audit Fields**: `usercreatedid`, `datecreated`, `usermodifiedid`, `datemodified`
- **Relaciones**: Referenciada por `usuarioperfil.usuarioid`, `contacto.usuarioid`, `audit_log_umbral.usuarioid`, `alerta.usuarioid`

#### **Tabla: usuarioperfil**
- **Primary Key**: NO TIENE (tabla de relaci√≥n pura)
- **Foreign Keys**: 
  - `usuarioid` ‚Üí `usuario.usuarioid`
  - `perfilid` ‚Üí `perfil.perfilid`
- **Campos**: `statusid` (INTEGER, default: 1)
- **Audit Fields**: `usercreatedid`, `datecreated`, `usermodifiedid`, `datemodified`
- **Relaciones**: Tabla de relaci√≥n muchos a muchos entre usuarios y perfiles

#### **Tabla: contacto**
- **Primary Key**: `contactoid` (INTEGER)
- **Foreign Keys**: 
  - `usuarioid` ‚Üí `usuario.usuarioid`
  - `medioid` ‚Üí `medio.medioid`
- **Campos**: 
  - `celular` (VARCHAR) - N√∫mero de tel√©fono (nullable)
  - `correo` (VARCHAR) - Direcci√≥n de email (nullable)
  - `statusid` (INTEGER) - Estado del registro (default: 1)
- **Audit Fields**: `usercreatedid`, `datecreated`, `usermodifiedid`, `datemodified`
- **Relaciones**: Conecta usuarios con sus medios de contacto

#### **Tabla: mensaje**
- **Primary Key**: `alertaid` (BIGINT)
- **Foreign Keys**: 
  - `contactoid` ‚Üí `contacto.contactoid`
- **Campos**: 
  - `mensaje` (TEXT) - Contenido del mensaje de alerta
  - `fecha` (TIMESTAMP WITH TIME ZONE) - Fecha del mensaje (default: now())
  - `statusid` (INTEGER) - Estado del registro (default: -1)
- **Audit Fields**: `usercreatedid`, `datecreated`
- **Relaciones**: Referenciada por `alerta.alertaid`

#### **Tabla: umbral**
- **Primary Key**: `umbralid` (BIGINT)
- **Foreign Keys**: 
  - `ubicacionid` ‚Üí `ubicacion.ubicacionid`
  - `criticidadid` ‚Üí `criticidad.criticidadid`
  - `nodoid` ‚Üí `nodo.nodoid`
  - `metricaid` ‚Üí `metrica.metricaid`
  - `tipoid` ‚Üí `tipo.tipoid`
- **Campos**: 
  - `umbral` (VARCHAR) - Nombre del umbral (ej: "Temperatura", "Humedad", "pH")
  - `maximo` (DOUBLE PRECISION) - Valor m√°ximo permitido
  - `minimo` (DOUBLE PRECISION) - Valor m√≠nimo permitido
  - `statusid` (INTEGER) - Estado del registro (default: 1)
- **Audit Fields**: `usercreatedid`, `datecreated`, `usermodifiedid`, `datemodified`
- **Relaciones**: Referenciada por `perfilumbral.umbralid` y `alerta.umbralid`

#### **Tabla: perfilumbral**
- **Primary Key**: NO TIENE (tabla de relaci√≥n pura)
- **Foreign Keys**: 
  - `perfilid` ‚Üí `perfil.perfilid`
  - `umbralid` ‚Üí `umbral.umbralid`
- **Campos**: `statusid` (INTEGER, default: 1)
- **Audit Fields**: `usercreatedid`, `datecreated`, `usermodifiedid`, `datemodified`
- **Relaciones**: Define qu√© perfiles reciben alertas de qu√© umbrales

#### **Tabla: audit_log_umbral**
- **Primary Key**: `auditid` (BIGINT)
- **Foreign Keys**: 
  - `umbralid` ‚Üí `umbral.umbralid`
  - `modified_by` ‚Üí `usuario.usuarioid`
- **Campos**: 
  - `accion` (VARCHAR) - "CREAR", "ACTUALIZAR", "ELIMINAR"
  - `old_minimo` (DOUBLE PRECISION) - Valor m√≠nimo anterior
  - `new_minimo` (DOUBLE PRECISION) - Valor m√≠nimo nuevo
  - `old_maximo` (DOUBLE PRECISION) - Valor m√°ximo anterior
  - `new_maximo` (DOUBLE PRECISION) - Valor m√°ximo nuevo
  - `old_criticidadid` (INTEGER) - Criticidad anterior
  - `new_criticidadid` (INTEGER) - Criticidad nueva
  - `modified_at` (TIMESTAMP) - Fecha y hora del cambio (default: CURRENT_TIMESTAMP)
- **Relaciones**: Registra todos los cambios en umbrales con valores espec√≠ficos

#### **Tabla: alerta**
- **Primary Key**: `alertaid` (BIGINT)
- **Foreign Keys**: 
  - `umbralid` ‚Üí `umbral.umbralid`
  - `medicionid` ‚Üí `medicion.medicionid`
- **Campos**: 
  - `fecha` (TIMESTAMP WITH TIME ZONE) - Cu√°ndo se gener√≥ la alerta (default: now())
  - `statusid` (INTEGER) - Estado del registro (default: -1)
- **Audit Fields**: `usercreatedid`, `datecreated`
- **Relaciones**: Registra alertas generadas cuando mediciones superan umbrales

## üîí CONSTRAINTS Y VALIDACIONES

### **CONSTRAINTS DE INTEGRIDAD REFERENCIAL**
- Todas las foreign keys tienen CASCADE UPDATE
- NO DELETE CASCADE (por seguridad)
- Campos de estado referencian tabla de estados

### **CONSTRAINTS DE VALIDACI√ìN**
- `umbral.minimo < umbral.maximo`
- `alerta.medicionid` debe referenciar medici√≥n v√°lida
- `contacto.celular` o `contacto.correo` debe estar presente
- `audit_log_umbral.old_*` y `new_*` deben ser consistentes

### **CONSTRAINTS DE UNICIDAD (VERIFICADOS)**
- `usuario.login` debe ser √∫nico
- `nodo.deveui` debe ser √∫nico
- `umbral.umbralid` es PRIMARY KEY (SERIAL) - NO hay constraint √∫nico en (metricaid, tipoid)
- `perfilumbral.perfilid + perfilumbral.umbralid` es PRIMARY KEY compuesta
- `contacto.usuarioid + medioid` debe ser √∫nico por medio
- `medicion.ubicacionid + nodoid + tipoid + fecha + metricaid` es UNIQUE (unq_medicion)

## üìä FLUJO DE DATOS Y L√ìGICA DE NEGOCIO

### **1. FLUJO DE MONITOREO**
```
medicion ‚Üí comparar con umbral ‚Üí generar alerta ‚Üí notificar usuarios
```

### **2. FLUJO DE NOTIFICACIONES**
```
medicion ‚Üí umbral ‚Üí alerta ‚Üí perfilumbral ‚Üí usuario ‚Üí contacto ‚Üí medio ‚Üí env√≠o
```

### **3. FLUJO DE AUDITOR√çA**
```
cambio en umbral ‚Üí audit_log_umbral ‚Üí historial completo
```

## üö® CONSIDERACIONES DE IMPLEMENTACI√ìN

### **PERFORMANCE**
- √çndices en campos de b√∫squeda frecuente
- Particionamiento de tablas de mediciones por fecha
- Cache de umbrales activos en memoria

### **ESCALABILIDAD**
- Tablas de mediciones pueden crecer exponencialmente
- Sistema de archivo de datos hist√≥ricos
- Compresi√≥n de datos antiguos

### **SEGURIDAD**
- RLS habilitado en todas las tablas
- Audit trail completo de cambios
- Validaci√≥n de entrada en todos los campos

### **MANTENIMIENTO**
- Limpieza autom√°tica de alertas resueltas antiguas
- Backup autom√°tico de configuraciones cr√≠ticas
- Monitoreo de salud del sistema

## üéØ ESTADO ACTUAL DEL SISTEMA (ACTUALIZADO)

### **‚úÖ IMPLEMENTADO Y FUNCIONANDO**
- **Trigger de alertas**: Funciona correctamente para nodos con umbrales configurados
- **Sistema de umbrales**: Configurado para nodos 1, 7 (parcialmente)
- **Generaci√≥n de alertas**: 2 alertas generadas exitosamente
- **An√°lisis de nodos activos**: 3 nodos activos identificados (2, 6, 7)

### **üìä NODOS ACTIVOS IDENTIFICADOS**
- **Nodo 2**: Ubicaci√≥n 2, M√©tricas 1,2,3, Tipo 1 (SIN umbrales)
- **Nodo 6**: Ubicaci√≥n 3, M√©tricas 1,2,3, Tipos 1,3 (SIN umbrales)  
- **Nodo 7**: Ubicaci√≥n 4, M√©tricas 1,2,3, Tipos 1,3 (CON umbrales parciales)

### **‚ö†Ô∏è PENDIENTE DE IMPLEMENTACI√ìN**
- **Umbrales para nodos 2 y 6**: Necesarios para cobertura completa
- **Umbrales Tipo 3 para nodo 7**: Completar configuraci√≥n
- **Sistema de notificaciones**: Configurar usuarios y contactos
- **Pruebas con m√∫ltiples nodos**: Validar funcionamiento completo

### **üîß ESTRUCTURA REAL VERIFICADA**
- **Tablas de referencia**: `nodo`, `ubicacion`, `metrica`, `tipo` (nombres correctos)
- **Constraints √∫nicos**: `umbral.umbralid` (PK), `perfilumbral(perfilid, umbralid)` (PK compuesta)
- **Constraint medici√≥n**: `unq_medicion` en (ubicacionid, nodoid, tipoid, fecha, metricaid)
- **Audit fields**: Todos los campos NOT NULL requieren valores por defecto

## üéØ PR√ìXIMOS PASOS T√âCNICOS

### **1. COMPLETAR UMBRALES PARA NODOS ACTIVOS** ‚úÖ EN PROGRESO
- Crear umbrales para nodo 2 (ubicaci√≥n 2, m√©tricas 1,2,3, tipo 1)
- Crear umbrales para nodo 6 (ubicaci√≥n 3, m√©tricas 1,2,3, tipos 1,3)
- Completar umbrales para nodo 7 (agregar tipo 3)

### **2. PRUEBAS DEL SISTEMA COMPLETO**
- Probar trigger con nodos 2 y 6
- Verificar generaci√≥n de alertas para todos los nodos activos
- Validar funcionamiento con diferentes m√©tricas y tipos

### **3. CONFIGURACI√ìN DE NOTIFICACIONES**
- Crear usuarios y perfiles de prueba
- Configurar contactos y medios de comunicaci√≥n
- Probar env√≠o de mensajes de alerta

### **4. OPTIMIZACI√ìN Y MONITOREO**
- Revisar performance del trigger
- Implementar monitoreo de salud del sistema
- Configurar alertas de sistema
