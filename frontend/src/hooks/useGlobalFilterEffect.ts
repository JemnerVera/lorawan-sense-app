import { useMemo } from 'react';
import { useFilters } from '../contexts/FilterContext';

interface GlobalFilterEffectOptions {
  tableName: string;
  data: any[];
}

export const useGlobalFilterEffect = ({ tableName, data }: GlobalFilterEffectOptions) => {
  const { paisSeleccionado, empresaSeleccionada, fundoSeleccionado } = useFilters();

  const filteredData = useMemo(() => {
    if (!data || data.length === 0) return data;

    // L칩gica espec칤fica para cada tabla seg칰n los requerimientos:
    // - Pa칤s: Sin filtros (mostrar todos)
    // - Empresa: Filtrar por Pa칤s seleccionado
    // - Fundo: Filtrar por Empresa seleccionada

    // Para la tabla 'pais', siempre mostrar todos los registros sin filtros
    if (tableName === 'pais') {
      console.log('游깴 Tabla Pa칤s: Mostrando todos los registros sin filtros');
      return data;
    }

    // Para la tabla 'empresa', filtrar solo por pa칤s si est치 seleccionado
    if (tableName === 'empresa') {
      if (!paisSeleccionado) {
        console.log('游끽 Tabla Empresa: Sin pa칤s seleccionado, mostrando todas las empresas');
        return data;
      }
      
      const filtered = data.filter(row => {
        return row.paisid && row.paisid.toString() === paisSeleccionado;
      });
      
      console.log('游끽 Tabla Empresa: Filtradas por pa칤s', {
        paisSeleccionado,
        totalEmpresas: data.length,
        empresasFiltradas: filtered.length
      });
      
      return filtered;
    }

    // Para la tabla 'fundo', filtrar solo por empresa si est치 seleccionada
    if (tableName === 'fundo') {
      if (!empresaSeleccionada) {
        console.log('游낈 Tabla Fundo: Sin empresa seleccionada, mostrando todos los fundos');
        return data;
      }
      
      const filtered = data.filter(row => {
        return row.empresaid && row.empresaid.toString() === empresaSeleccionada;
      });
      
      console.log('游낈 Tabla Fundo: Filtrados por empresa', {
        empresaSeleccionada,
        totalFundos: data.length,
        fundosFiltrados: filtered.length
      });
      
      return filtered;
    }

    // Para otras tablas, aplicar la l칩gica original de filtros jer치rquicos
    // Si no hay filtros activos, devolver todos los datos
    if (!paisSeleccionado && !empresaSeleccionada && !fundoSeleccionado) {
      return data;
    }

    console.log('游댌 Aplicando filtros globales para tabla:', {
      tableName,
      paisSeleccionado,
      empresaSeleccionada,
      fundoSeleccionado,
      totalData: data.length
    });

    return data.filter(row => {
      let matches = true;

      // Aplicar filtro por pa칤s si est치 seleccionado
      if (paisSeleccionado && row.paisid) {
        matches = matches && row.paisid.toString() === paisSeleccionado;
      }

      // Aplicar filtro por empresa si est치 seleccionado
      if (empresaSeleccionada && row.empresaid) {
        matches = matches && row.empresaid.toString() === empresaSeleccionada;
      }

      // Aplicar filtro por fundo si est치 seleccionado
      if (fundoSeleccionado && row.fundoid) {
        matches = matches && row.fundoid.toString() === fundoSeleccionado;
      }

      // Para tablas que no tienen estos campos directamente, buscar en relaciones
      if (tableName === 'nodo' && (empresaSeleccionada || fundoSeleccionado)) {
        // Los nodos est치n relacionados con ubicaciones a trav칠s de localizacion
        // Si hay filtros de empresa/fundo, necesitamos verificar las ubicaciones relacionadas
        // Por ahora, si no hay campos directos, no filtrar
        // TODO: Implementar l칩gica de relaciones si es necesario
      }

      if (tableName === 'sensor' && (empresaSeleccionada || fundoSeleccionado)) {
        // Los sensores est치n relacionados con nodos, que pueden estar relacionados con ubicaciones
        // Por ahora, si no hay campos directos, no filtrar
        // TODO: Implementar l칩gica de relaciones si es necesario
      }

      if (tableName === 'metricasensor' && (empresaSeleccionada || fundoSeleccionado)) {
        // Similar a sensor
        // TODO: Implementar l칩gica de relaciones si es necesario
      }

      // Para tablas que tienen relaciones directas con entidad
      if (tableName === 'tipo' && fundoSeleccionado) {
        // Los tipos est치n relacionados con entidades, que pueden estar relacionadas con fundos
        if (row.entidadid) {
          // Verificar si la entidad pertenece al fundo seleccionado
          // Esto requerir칤a datos adicionales de entidades
        }
      }

      // Para tablas que tienen relaciones directas con ubicaci칩n
      if (tableName === 'localizacion' && fundoSeleccionado) {
        // Las localizaciones est치n relacionadas con ubicaciones, que pertenecen a fundos
        if (row.ubicacionid) {
          // Verificar si la ubicaci칩n pertenece al fundo seleccionado
          // Esto requerir칤a datos adicionales de ubicaciones
        }
      }

      return matches;
    });
  }, [data, paisSeleccionado, empresaSeleccionada, fundoSeleccionado, tableName]);

  // Solo hacer log si hay cambios significativos
  if (filteredData.length !== data.length) {
    console.log('游늵 Resultado del filtrado global:', {
      tableName,
      originalCount: data.length,
      filteredCount: filteredData.length,
      hasFilters: !!(paisSeleccionado || empresaSeleccionada || fundoSeleccionado)
    });
  }

  return filteredData;
};
